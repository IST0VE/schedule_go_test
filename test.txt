package main

import (
	"database/sql"
	"fmt"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

// Define a struct to hold the schedule parameters
type ScheduleParams struct {
	LpuID                       int
	DoctorID                    int
	ScheduleStartDate           string
	ScheduleEndDate             string
	ScheduleWorkDays            []time.Weekday
	ScheduleWeekParity          string
	ScheduleDayParity           string
	ScheduleStartTime           string
	ScheduleEndTime             string
	ScheduleAppointmentDuration int
	ScheduleOfficeNumber        int
}

// Define a struct for each schedule cell
type ScheduleCell struct {
	LpuID                 int
	DoctorID              int
	ScheduleCellDate      string
	ScheduleCellTime      string
	ScheduleStatus        string
	ScheduleReceptionType string
	ScheduleOfficeNumber  int
	ScheduleComment       string
}

func insertScheduleCells(cells []ScheduleCell) error {
	db, err := sql.Open("mysql", "root:root!!!!@/medical_schedule")
	if err != nil {
		return err
	}
	defer db.Close()

	// Подготовка SQL запроса для вставки данных
	stmt, err := db.Prepare(`
        INSERT INTO schedule (lpu_id, doctor_id, schedule_cell_date, schedule_cell_time, schedule_status, schedule_reception_type, schedule_office_number, schedule_comment)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `)
	if err != nil {
		return err
	}
	defer stmt.Close()

	// Вставка данных для каждой ячейки расписания
	for _, cell := range cells {
		_, err := stmt.Exec(
			cell.LpuID,
			cell.DoctorID,
			cell.ScheduleCellDate,
			cell.ScheduleCellTime,
			cell.ScheduleStatus,
			cell.ScheduleReceptionType,
			cell.ScheduleOfficeNumber,
			cell.ScheduleComment,
		)
		if err != nil {
			return err
		}
	}

	return nil
}

// Helper function to parse time
func parseTime(t string) time.Time {
	parsedTime, _ := time.Parse("15:04", t)
	return parsedTime
}

// Generate time slots for a given day
func generateTimeSlots(start, end time.Time, duration int) []string {
	var slots []string
	for t := start; t.Before(end); t = t.Add(time.Minute * time.Duration(duration)) {
		slots = append(slots, t.Format("15:04"))
	}
	return slots
}

// Generate schedule cells based on parameters
func generateScheduleCells(params ScheduleParams) []ScheduleCell {
	var cells []ScheduleCell
	startDate, _ := time.Parse("2006-01-02", params.ScheduleStartDate)
	endDate, _ := time.Parse("2006-01-02", params.ScheduleEndDate)
	startTime := parseTime(params.ScheduleStartTime)
	endTime := parseTime(params.ScheduleEndTime)

	for d := startDate; !d.After(endDate); d = d.AddDate(0, 0, 1) {
		weekday := d.Weekday()
		dayOfMonth := d.Day()
		_, weekNumber := d.ISOWeek()

		// Check if the day is a work day
		isWorkDay := false
		for _, wd := range params.ScheduleWorkDays {
			if weekday == wd {
				isWorkDay = true
				break
			}
		}

		if !isWorkDay {
			continue
		}

		// Apply week parity filter
		if params.ScheduleWeekParity == "четная" && weekNumber%2 != 0 {
			continue
		}
		if params.ScheduleWeekParity == "нечетная" && weekNumber%2 == 0 {
			continue
		}

		// Apply day parity filter
		if (params.ScheduleDayParity == "четный" && dayOfMonth%2 != 0) || (params.ScheduleDayParity == "нечетный" && dayOfMonth%2 == 0) {
			continue
		}

		// Generate time slots
		slots := generateTimeSlots(startTime, endTime, params.ScheduleAppointmentDuration)
		for _, slot := range slots {
			cell := ScheduleCell{
				LpuID:                 params.LpuID,
				DoctorID:              params.DoctorID,
				ScheduleCellDate:      d.Format("2006-01-02"),
				ScheduleCellTime:      slot,
				ScheduleStatus:        "доступно",
				ScheduleReceptionType: "первичный",
				ScheduleOfficeNumber:  params.ScheduleOfficeNumber,
				ScheduleComment:       "",
			}
			cells = append(cells, cell)
		}
	}

	return cells
}

func main() {
	// Example usage
	start := time.Now()
	params := ScheduleParams{
		LpuID:                       1,
		DoctorID:                    4,
		ScheduleStartDate:           "2024-06-01",
		ScheduleEndDate:             "2024-06-30",
		ScheduleWorkDays:            []time.Weekday{time.Monday, time.Tuesday, time.Thursday, time.Friday, time.Wednesday},
		ScheduleWeekParity:          "четная",
		ScheduleDayParity:           "нечетный",
		ScheduleStartTime:           "09:00",
		ScheduleEndTime:             "17:00",
		ScheduleAppointmentDuration: 12,
		ScheduleOfficeNumber:        102,
	}
	cells := generateScheduleCells(params)
	if err := insertScheduleCells(cells); err != nil {
		fmt.Println("Ошибка при вставке данных:", err)
		return
	}
	elapsed := time.Since(start)
	fmt.Println("Время выполнения кода:", elapsed)
	fmt.Println("Данные успешно вставлены.")

}
